@page "/Map"
@rendermode InteractiveServer
@inject IHttpClientFactory httpClientFactory
@inject IJSRuntime JSRuntime

@*<div id="map" style="height: 400px;"></div>*@

<Map width="400px" height="400px"></Map>

<button class="btn btn-primary" @onclick="Clickk">Click me</button>
@if (point != null) {
    <p role="status">latitude: @point.Latitude</p>
    <p role="status">longitude: @point.Longitude</p>
}
@code {
    private Point point;

    public HttpClient httpClient = new HttpClient();

    //protected override async Task OnInitializedAsync()
    async Task Clickk()
    {
        // Pobierz punkt z Pythonowego API
        Console.WriteLine("nie ok");
        var response = await httpClient.GetAsync("http://127.0.0.1:8000/points");
        Console.WriteLine("okej");
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            var coordinates = JsonConvert.DeserializeObject<List<double>>(content);

            // Utwórz obiekt Point na podstawie otrzymanych współrzędnych
            point = new Point
                {
                    Latitude = coordinates[0],
                    Longitude = coordinates[1]
                };
            Console.WriteLine(point);
        }
    }

    // Klasa reprezentująca pojedynczy punkt
    public class Point
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && point != null)
        {
            // Użyj biblioteki JavaScriptowej do renderowania punktu na mapie
            await JSRuntime.InvokeVoidAsync("renderMap", point.Latitude, point.Longitude);
        }
    }
}
